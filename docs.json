[{"name":"PruneTodo","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when it encounters `Debug.todo \":prune\"` or `todo \":prune\"` as a placeholder\n\n    config =\n        [ PruneTodo.rule\n        ]\n\n\n## Failure Examples\n\nWhen the code cannot be further pruned, e.g.\n\n    a : z\n    a =\n        Debug.todo \":prune\"\n\n`prune` will be replaced with `unpruneable`\n\n    a : z\n    a =\n        Debug.todo \":unpruneable\"\n\nThis is to indicate that it has reached a dead end and further information is need to continue pruning.\n\n\n## Success Examples\n\n\n### Unit value\n\n    a : ()\n    a =\n        Debug.todo \":prune\"\n\nwill be replaced with\n\n    a : ()\n    a =\n        ()\n\n\n### Int\n\n    a : Int\n    a =\n        Debug.todo \":prune\"\n\nwill be replaced with\n\n    a : Int\n    a =\n        0\n\n\n### Maybe a\n\n    a : Maybe a -> a\n    a someVal =\n        Debug.todo \":prune\"\n\nwill be replaced with\n\n    a : Maybe a -> a\n    a someVal =\n        case someVal of\n            Nothing ->\n                Debug.todo \":prune\"\n\n            Just arg ->\n                Debug.todo \":prune\"\n\n\n### Result e a\n\n    a : Result e a -> a\n    a someVal =\n        Debug.todo \":prune\"\n\nwill be replaced with\n\n    a : Result e a -> a\n    a someVal =\n        case someVal of\n            Ok argOk ->\n                Debug.todo \":prune\"\n\n            Err argErr ->\n                Debug.todo \":prune\"\n\n\n### Custom types\n\nGiven\nmodule Other exposing (Direction(..))\n\n    type Direction\n        = Up Int\n        | Down String Int\n        | Left\n        | Right Direction Direction Direction\n\nand\nmodule This exposing (a)\n\n    directionToText : Direction -> String\n    directionToText direction =\n        Debug.todo \":prune\"\n\n`directionToText` will be updated to\n\n    directionToText : Direction -> String\n    directionToText direction =\n        case direction of\n            Up arg0 ->\n                Debug.todo \":prune\"\n\n            Down arg1 arg2 ->\n                Debug.todo \":prune\"\n\n            Left ->\n                Debug.todo \":prune\"\n\n            Right arg3 arg4 arg5 ->\n                Debug.todo \":prune\"\n\n\n## When (not) to enable this rule\n\nThis rule is useful for trying to do inline code generation.\nThis rule is not useful when you want to write code manually.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template wolfadex/elm-review-forestry/example --rules PruneTodo\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]}]